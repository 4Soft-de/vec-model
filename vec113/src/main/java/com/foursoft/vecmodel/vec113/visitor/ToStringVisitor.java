package com.foursoft.vecmodel.vec113.visitor;

import com.foursoft.vecmodel.vec113.*;

import java.util.stream.Collectors;

/**
 * Base implementation for a {@link Visitor} providing kind of a toString method for all classes
 * since those are autogenerated and configuring a toString would be too difficult.
 */
public class ToStringVisitor extends BaseVisitor<String, RuntimeException> {

    @Override
    public String visitVecCopyrightInformation(VecCopyrightInformation aBean) throws RuntimeException {
        final String copyrightNotes = aBean.getCopyrightNotes().stream()
                .map(localizedString -> localizedString.accept(this))
                .collect(Collectors.joining(", "));
        final String referencedItems = aBean.getRefItemVersion().stream()
                .map(vecItemVersion -> vecItemVersion.accept(this))
                .collect(Collectors.joining(", "));

        return "VecCopyrightInformation=" + (copyrightNotes.isEmpty()
                ? "None"
                : String.format("Copyright Notes: %s; Referenced Items: %s", copyrightNotes, referencedItems));
    }

    @Override
    public String visitVecConformanceClass(VecConformanceClass aBean) throws RuntimeException {
        return String.format("VecConformance Id: %s: Version: %s, URL: %s",
                aBean.getIdentification(), aBean.getVersion(), aBean.getUrl());
    }

    @Override
    public String visitVecContract(VecContract aBean) throws RuntimeException {
        return String.format("VecContract with Company: %s, Role: %s, Item Versions: %s",
                aBean.getCompanyName(), aBean.getContractRole(),
                aBean.getRefItemVersion().stream()
                        .map(vecItemVersion -> vecItemVersion.accept(this))
                        .collect(Collectors.joining(", ")));
    }

    @Override
    public String visitVecDocumentVersion(VecDocumentVersion aBean) throws RuntimeException {
        return String.format("VecDocument with Document Number: %s, Document Version: %s, Document Type: %s, " +
                        "Document Location: %s, Linked Document: %s, Amount of sheets: %s",
                aBean.getDocumentNumber(), aBean.getDocumentVersion(), aBean.getDocumentType(),
                aBean.getLocation(), aBean.getFileName(), aBean.getNumberOfSheets());
    }

    public String visitVecSpecification(VecSpecification aBean) throws RuntimeException {
        return String.format("VEC Specification with id %s; Specification Class: %s",
                aBean.getIdentification(), aBean.getClass().getSimpleName());
    }

    @Override
    public String visitVecItemHistoryEntry(VecItemHistoryEntry aBean) throws RuntimeException {
        return String.format("VecItemHistoryEntry with XML Id: %s, Item Type: %s," +
                        "Predecessor ItemVersion: %s, Successor ItemVersion: %s",
                aBean.getXmlId(), aBean.getType().value(),
                aBean.getPredecessorVersion().accept(this), aBean.getSuccessorVersion().accept(this));
    }

    public String visitVecItemVersion(VecItemVersion aBean) throws RuntimeException {
        return String.format("VecItemVersion with XML id %s, Company Name: %s, Creation: %s, Descriptions: %s",
                aBean.getXmlId(), aBean.getCompanyName(), aBean.getCreation().accept(this),
                aBean.getDescriptions().stream()
                        .map(localizedString -> localizedString.accept(this))
                        .collect(Collectors.joining(", ")));
    }

    @Override
    public String visitVecCreation(VecCreation aBean) throws RuntimeException {
        return String.format("VecCreation Date: %s, Creator: %s, Designer: %s",
                aBean.getCreationDate(),
                aBean.getCreator().accept(this), aBean.getResponsibleDesigner().accept(this));
    }

    @Override
    public String visitVecPerson(VecPerson aBean) throws RuntimeException {
        return String.format("VecPerson %s %s <%s> @ %s / %s",
                aBean.getFirstName(), aBean.getLastName(), String.join(", ", aBean.getEmailAddresses()),
                aBean.getCompanyName(), aBean.getDepartment());
    }
    
}
